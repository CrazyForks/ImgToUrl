# version: '3.8'

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: image-host-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-root123}
      MYSQL_DATABASE: ${DB_NAME:-image_host}
      MYSQL_USER: ${DB_USER:-imagehost}
      MYSQL_PASSWORD: ${DB_PASSWORD:-root123}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - image-host-network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p$$MYSQL_ROOT_PASSWORD || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Redis 缓存 (可选)
  redis:
    image: redis:7-alpine
    container_name: image-host-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - image-host-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

  # Go 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: image-host-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      - SERVER_MODE=release
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=${DB_USER:-imagehost}
      - DB_PASSWORD=${DB_PASSWORD:-root123}
      - DB_NAME=${DB_NAME:-image_host}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - R2_ACCOUNT_ID=${R2_ACCOUNT_ID}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME}
      - R2_ENDPOINT=${R2_ENDPOINT}
      - R2_PUBLIC_URL=${R2_PUBLIC_URL}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      - MAX_BATCH_SIZE=${MAX_BATCH_SIZE:-52428800}
      - MAX_BATCH_COUNT=${MAX_BATCH_COUNT:-10}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - image-host-network
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      timeout: 10s
      retries: 5
      start_period: 30s

  # Vue3 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8080}
    container_name: image-host-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - image-host-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      timeout: 10s
      retries: 3

  # Nginx 反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: image-host-nginx
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - image-host-network
    profiles:
      - proxy

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  image-host-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16